{"version":3,"sources":["height-observer.tsx","streamlit-player.tsx","index.tsx"],"names":["HeightObserver","children","fixedHeight","onChange","useState","container","setContainer","changeCallback","useCallback","useEffect","document","body","scrollHeight","ro","ResizeObserver","entries","entry","find","target","contentRect","height","observe","disconnect","ref","node","withStreamlitConnection","args","playerEvents","setPlayerEvents","events","forEach","name","data","Streamlit","setComponentValue","setFrameHeight","url","width","undefined","playing","loop","controls","light","volume","muted","playbackRate","progressInterval","playsinline","playInline","config","ReactDOM","render","StrictMode","getElementById"],"mappings":"4OA+CeA,EAtCQ,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,SAAoC,EACjDC,mBAAgC,MADiB,mBAC5EC,EAD4E,KACjEC,EADiE,KAI7EC,EAAiBC,sBAAYL,EAAU,IA2B7C,OAzBAM,qBAAU,WAKR,GAHAF,EAAeL,GAAeQ,SAASC,KAAKC,eAGvCV,GAAeG,EAAW,CAG7B,IAAMQ,EAAK,IAAIC,KAAe,SAAAC,GAC5B,IAAMC,EAAQD,EAAQE,MAAK,SAAAD,GAAK,OAAIA,EAAME,SAAWb,KACjDW,GACFT,EAAeS,EAAMG,YAAYC,WAQrC,OAHAP,EAAGQ,QAAQhB,GAGJ,WACLQ,EAAGS,iBAGN,CAACjB,EAAWH,EAAaK,IAG1B,yBAAKgB,IA9Bc,SAACC,GAAD,OAA0BlB,EAAakB,KA+BvDvB,ICSQwB,eAzCS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAA2B,EACZtB,mBAAS,IADG,mBAC7CuB,EAD6C,KAC/BC,EAD+B,KAmBpD,OAfAnB,qBAAU,WACR,IAAIoB,EAAc,GAElBH,EAAKG,OAAOC,SAAQ,SAACC,GACnBF,EAAOE,GAAQ,SAACC,GACdC,IAAUC,kBAAkB,CAC1BH,KAAMA,EACNC,KAAMA,QAKZJ,EAAgBC,KACf,CAACH,EAAKG,SAGP,kBAAC,EAAD,CAAgB1B,SAAU8B,IAAUE,eAAgBjC,YAAawB,EAAKN,QACpE,kBAAC,IAAD,eACEgB,IAAKV,EAAKU,IACVC,MAAM,OACNjB,OAAQM,EAAKN,aAAUkB,EACvBC,QAASb,EAAKa,cAAWD,EACzBE,KAAMd,EAAKc,WAAQF,EACnBG,SAAUf,EAAKe,eAAYH,EAC3BI,MAAOhB,EAAKgB,YAASJ,EACrBK,OAAQjB,EAAKiB,OACbC,MAAOlB,EAAKkB,YAASN,EACrBO,aAAcnB,EAAKmB,aACnBC,iBAAkBpB,EAAKoB,iBACvBC,YAAarB,EAAKsB,iBAAcV,EAChCW,OAAQvB,EAAKuB,aAAUX,GACnBX,QCzCZuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAAS2C,eAAe,W","file":"static/js/main.0054d9ad.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\"\nimport ResizeObserver from \"resize-observer-polyfill\"\n\ninterface HeightObserverProps {\n  children?: any\n  fixedHeight?: number\n  onChange: (height: number) => void\n}\n\nconst HeightObserver = ({ children, fixedHeight, onChange }: HeightObserverProps) => {\n  const [container, setContainer] = useState<HTMLDivElement | null>(null)\n  const containerRef = (node: HTMLDivElement) => setContainer(node)\n\n  const changeCallback = useCallback(onChange, [])\n\n  useEffect(() => {\n    // Initialize height\n    changeCallback(fixedHeight || document.body.scrollHeight)\n\n    // Change height dynamically if fixedHeight is not set\n    if (!fixedHeight && container) {\n\n      // Call onChange with new height as parameter\n      const ro = new ResizeObserver(entries => {\n        const entry = entries.find(entry => entry.target === container)\n        if (entry) {\n          changeCallback(entry.contentRect.height)\n        }\n      })\n\n      // Start observing div height changes\n      ro.observe(container)\n\n      // Unobserve div on unmount\n      return () => {\n        ro.disconnect()\n      }\n    }\n  }, [container, fixedHeight, changeCallback])\n\n  return (\n    <div ref={containerRef}>\n      {children}\n    </div>\n  )\n}\n\nexport default HeightObserver\n","import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useState } from \"react\"\n\nimport ReactPlayer from \"react-player\"\nimport HeightObserver from \"./height-observer\"\n\nconst StreamlitPlayer = ({ args }: ComponentProps) => {\n  const [playerEvents, setPlayerEvents] = useState({})\n\n  // Handle events\n  useEffect(() => {\n    let events: any = {}\n\n    args.events.forEach((name: string) => {\n      events[name] = (data?: any) => {\n        Streamlit.setComponentValue({\n          name: name,\n          data: data\n        })\n      }\n    })\n\n    setPlayerEvents(events)\n  }, [args.events])\n\n  return (\n    <HeightObserver onChange={Streamlit.setFrameHeight} fixedHeight={args.height}>\n      <ReactPlayer\n        url={args.url}\n        width=\"100%\"\n        height={args.height || undefined}\n        playing={args.playing || undefined}\n        loop={args.loop || undefined}\n        controls={args.controls || undefined}\n        light={args.light || undefined}\n        volume={args.volume}\n        muted={args.muted || undefined}\n        playbackRate={args.playbackRate}\n        progressInterval={args.progressInterval}\n        playsinline={args.playInline || undefined}\n        config={args.config || undefined}\n        {...playerEvents}\n      />\n    </HeightObserver>\n  )\n}\n\nexport default withStreamlitConnection(StreamlitPlayer)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitPlayer from \"./streamlit-player\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitPlayer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}