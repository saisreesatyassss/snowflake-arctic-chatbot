{"version":3,"sources":["height-observer.tsx","streamlit-player.tsx","index.tsx"],"names":["HeightObserver","children","fixedHeight","onChange","divRef","useRef","useEffect","document","body","scrollHeight","current","ro","ResizeObserver","entries","entry","find","target","contentRect","height","observe","disconnect","ref","withStreamlitConnection","args","useState","playerEvents","setPlayerEvents","events","forEach","name","data","Streamlit","setComponentValue","setFrameHeight","url","width","undefined","playing","loop","controls","light","volume","muted","playbackRate","progressInterval","playsinline","playInline","config","ReactDOM","render","StrictMode","getElementById"],"mappings":"4OA0CeA,EAjCQ,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,SACzCC,EAASC,iBAAuB,MAyBtC,OAvBAC,qBAAU,WAKR,GAHAH,EAASD,GAAeK,SAASC,KAAKC,eAGjCP,GAAeE,EAAOM,QAAS,CAGlC,IAAMC,EAAK,IAAIC,KAAe,SAAAC,GAC5B,IAAMC,EAAQD,EAAQE,MAAK,SAAAD,GAAK,OAAIA,EAAME,SAAWZ,EAAOM,WACxDI,GACFX,EAASW,EAAMG,YAAYC,WAQ/B,OAHAP,EAAGQ,QAAQf,EAAOM,SAGX,kBAAMC,EAAGS,iBAEjB,CAAClB,EAAaC,IAGf,yBAAKkB,IAAKjB,GACPH,ICcQqB,eAzCS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAA2B,EACZC,mBAAS,IADG,mBAC7CC,EAD6C,KAC/BC,EAD+B,KAmBpD,OAfApB,qBAAU,WACR,IAAIqB,EAAc,GAElBJ,EAAKI,OAAOC,SAAQ,SAACC,GACnBF,EAAOE,GAAQ,SAACC,GACdC,IAAUC,kBAAkB,CAC1BH,KAAMA,EACNC,KAAMA,QAKZJ,EAAgBC,KACf,CAACJ,EAAKI,SAGP,kBAAC,EAAD,CAAgBxB,SAAU4B,IAAUE,eAAgB/B,YAAaqB,EAAKL,QACpE,kBAAC,IAAD,eACEgB,IAAKX,EAAKW,IACVC,MAAM,OACNjB,OAAQK,EAAKL,aAAUkB,EACvBC,QAASd,EAAKc,cAAWD,EACzBE,KAAMf,EAAKe,WAAQF,EACnBG,SAAUhB,EAAKgB,eAAYH,EAC3BI,MAAOjB,EAAKiB,YAASJ,EACrBK,OAAQlB,EAAKkB,OACbC,MAAOnB,EAAKmB,YAASN,EACrBO,aAAcpB,EAAKoB,aACnBC,iBAAkBrB,EAAKqB,uBAAoBR,EAC3CS,YAAatB,EAAKuB,iBAAcV,EAChCW,OAAQxB,EAAKwB,aAAUX,GACnBX,QCzCZuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,W","file":"static/js/main.b7508049.chunk.js","sourcesContent":["import ResizeObserver from \"resize-observer-polyfill\"\nimport React, { useEffect, useRef } from \"react\"\n\ninterface HeightObserverProps {\n  children?: any\n  fixedHeight?: number\n  onChange: (height: number) => void\n}\n\nconst HeightObserver = ({ children, fixedHeight, onChange }: HeightObserverProps) => {\n  const divRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    // Initialize height\n    onChange(fixedHeight || document.body.scrollHeight)\n\n    // Change height dynamically if fixedHeight is not set\n    if (!fixedHeight && divRef.current) {\n\n      // Call onChange with new height as parameter\n      const ro = new ResizeObserver(entries => {\n        const entry = entries.find(entry => entry.target === divRef.current)\n        if (entry) {\n          onChange(entry.contentRect.height)\n        }\n      })\n\n      // Start observing div height changes\n      ro.observe(divRef.current)\n\n      // Unobserve div on unmount\n      return () => ro.disconnect()\n    }\n  }, [fixedHeight, onChange])\n\n  return (\n    <div ref={divRef}>\n      {children}\n    </div>\n  )\n}\n\nexport default HeightObserver\n","import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useState } from \"react\"\n\nimport ReactPlayer from \"react-player\"\nimport HeightObserver from \"./height-observer\"\n\nconst StreamlitPlayer = ({ args }: ComponentProps) => {\n  const [playerEvents, setPlayerEvents] = useState({})\n\n  // Handle events\n  useEffect(() => {\n    let events: any = {}\n\n    args.events.forEach((name: string) => {\n      events[name] = (data?: any) => {\n        Streamlit.setComponentValue({\n          name: name,\n          data: data\n        })\n      }\n    })\n\n    setPlayerEvents(events)\n  }, [args.events])\n\n  return (\n    <HeightObserver onChange={Streamlit.setFrameHeight} fixedHeight={args.height}>\n      <ReactPlayer\n        url={args.url}\n        width=\"100%\"\n        height={args.height || undefined}\n        playing={args.playing || undefined}\n        loop={args.loop || undefined}\n        controls={args.controls || undefined}\n        light={args.light || undefined}\n        volume={args.volume}\n        muted={args.muted || undefined}\n        playbackRate={args.playbackRate}\n        progressInterval={args.progressInterval || undefined}\n        playsinline={args.playInline || undefined}\n        config={args.config || undefined}\n        {...playerEvents}\n      />\n    </HeightObserver>\n  )\n}\n\nexport default withStreamlitConnection(StreamlitPlayer)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitPlayer from \"./streamlit-player\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitPlayer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}